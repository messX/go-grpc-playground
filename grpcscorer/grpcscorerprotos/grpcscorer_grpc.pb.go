// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: grpcscorerprotos/grpcscorer.proto

package grpcscorerprotos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ScorerClient is the client API for Scorer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScorerClient interface {
	GetScore(ctx context.Context, in *ScoreRequest, opts ...grpc.CallOption) (*ScoreResponse, error)
	StreamScore(ctx context.Context, in *ScoreRequest, opts ...grpc.CallOption) (Scorer_StreamScoreClient, error)
}

type scorerClient struct {
	cc grpc.ClientConnInterface
}

func NewScorerClient(cc grpc.ClientConnInterface) ScorerClient {
	return &scorerClient{cc}
}

func (c *scorerClient) GetScore(ctx context.Context, in *ScoreRequest, opts ...grpc.CallOption) (*ScoreResponse, error) {
	out := new(ScoreResponse)
	err := c.cc.Invoke(ctx, "/goscorerprotos.Scorer/GetScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scorerClient) StreamScore(ctx context.Context, in *ScoreRequest, opts ...grpc.CallOption) (Scorer_StreamScoreClient, error) {
	stream, err := c.cc.NewStream(ctx, &Scorer_ServiceDesc.Streams[0], "/goscorerprotos.Scorer/StreamScore", opts...)
	if err != nil {
		return nil, err
	}
	x := &scorerStreamScoreClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Scorer_StreamScoreClient interface {
	Recv() (*ScoreResponse, error)
	grpc.ClientStream
}

type scorerStreamScoreClient struct {
	grpc.ClientStream
}

func (x *scorerStreamScoreClient) Recv() (*ScoreResponse, error) {
	m := new(ScoreResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ScorerServer is the server API for Scorer service.
// All implementations must embed UnimplementedScorerServer
// for forward compatibility
type ScorerServer interface {
	GetScore(context.Context, *ScoreRequest) (*ScoreResponse, error)
	StreamScore(*ScoreRequest, Scorer_StreamScoreServer) error
	mustEmbedUnimplementedScorerServer()
}

// UnimplementedScorerServer must be embedded to have forward compatible implementations.
type UnimplementedScorerServer struct {
}

func (UnimplementedScorerServer) GetScore(context.Context, *ScoreRequest) (*ScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScore not implemented")
}
func (UnimplementedScorerServer) StreamScore(*ScoreRequest, Scorer_StreamScoreServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamScore not implemented")
}
func (UnimplementedScorerServer) mustEmbedUnimplementedScorerServer() {}

// UnsafeScorerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScorerServer will
// result in compilation errors.
type UnsafeScorerServer interface {
	mustEmbedUnimplementedScorerServer()
}

func RegisterScorerServer(s grpc.ServiceRegistrar, srv ScorerServer) {
	s.RegisterService(&Scorer_ServiceDesc, srv)
}

func _Scorer_GetScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScorerServer).GetScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goscorerprotos.Scorer/GetScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScorerServer).GetScore(ctx, req.(*ScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scorer_StreamScore_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ScoreRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ScorerServer).StreamScore(m, &scorerStreamScoreServer{stream})
}

type Scorer_StreamScoreServer interface {
	Send(*ScoreResponse) error
	grpc.ServerStream
}

type scorerStreamScoreServer struct {
	grpc.ServerStream
}

func (x *scorerStreamScoreServer) Send(m *ScoreResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Scorer_ServiceDesc is the grpc.ServiceDesc for Scorer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Scorer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goscorerprotos.Scorer",
	HandlerType: (*ScorerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetScore",
			Handler:    _Scorer_GetScore_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamScore",
			Handler:       _Scorer_StreamScore_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpcscorerprotos/grpcscorer.proto",
}
